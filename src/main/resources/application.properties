#spring.datasource.url = jdbc:mysql://localhost:3306/blog
#spring.datasource.username = root
#spring.datasource.password = 123456
#spring.datasource.driverClassName = com.mysql.jdbc.Driver

# default-store in spring session. it will be set in redis only outside.
spring.session.store-type=none


# **path**表示存储jar文件的路径 //路径要在此加入否则会异常找不到jarlocation;
jdbc.jarDirection=/demo/sonar/sonarqube-5.6.6/lib/jdbc/mysql/mysql-connector-java-5.1.35.jar
jdbc.driverClassName=com.mysql.jdbc.Driver
jdbc.url=jdbc:mysql://localhost:3306/blog
jdbc.user=root
jdbc.password=123456

# 生成的model类所在包
modelPackage=com.example.model
# 生成的mapper接口类所在包
mapperPackage=com.example.mapper
# 生成的mapper xml文件所在包
sqlMapperPackage=com.example.xml
# java根目录
javaSrc = src/main/java


# 数据库访问配置

# 主数据源，默认的

spring.datasource.type=com.alibaba.druid.pool.DruidDataSource

spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/blog
spring.datasource.username=root
spring.datasource.password=123456


# 下面为连接池的补充设置，应用到上面所有数据源中

# 初始化大小，最小，最大

spring.datasource.initialSize=5

spring.datasource.minIdle=5

spring.datasource.maxActive=20

# 配置获取连接等待超时的时间

spring.datasource.maxWait=60000

# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒

spring.datasource.timeBetweenEvictionRunsMillis=60000

# 配置一个连接在池中最小生存的时间，单位是毫秒

spring.datasource.minEvictableIdleTimeMillis=300000

spring.datasource.validationQuery=SELECT 1 FROM DUAL

spring.datasource.testWhileIdle=true

spring.datasource.testOnBorrow=false

spring.datasource.testOnReturn=false

# 打开PSCache，并且指定每个连接上PSCache的大小

spring.datasource.poolPreparedStatements=true

spring.datasource.maxPoolPreparedStatementPerConnectionSize=20

# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙

spring.datasource.filters=stat,wall,log4j

# 通过connectProperties属性来打开mergeSql功能；慢SQL记录

spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000

# 合并多个DruidDataSource的监控数据

#spring.datasource.useGlobalDataSourceStat=true
